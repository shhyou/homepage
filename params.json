{"name":"Shu-Hung, You","tagline":"suhorng.github.io","body":"# Shu-Hung You\r\n## Publication\r\n- Bruno C. d. S. Oliveira, Shin-Cheng Mu and Shu-Hung You.\r\n    Modular Refiable Matching: a list-of-functor approach to two-level types.\r\n    In *Proceedings of the 8th ACM SIGPLAN Symposium on Haskell*\r\n    (Haskell'15).\r\n\r\n    * [paper](http://dl.acm.org/citation.cfm?id=2804315)\r\n\r\n## Projects\r\n### CFALet\r\n### MiniFn\r\nMiniFn is a bare-metal compiler of a minimal functional language.\r\nIt compiles directly to x86 assembly.\r\n\r\n- [[project link]](https://github.com/suhorng/ss/tree/master/minifn)\r\n- [[presentation at Funth#11]](http://suhorng.github.io/ss/ft11/ccs.html) [[slide pdf]](http://suhorng.github.io/ss/ft11/Poor%20Man%27s%20Undergraduate Compilers.pdf) [[example code]](https://github.com/suhorng/ss/tree/master/ft11)\r\n\r\n#### Syntax Tree:\r\n\r\n    e ::= c                       ; constants\r\n        | x                       ; variable, should be scheme symbols\r\n        | (lambda (x1 [x2 ...]) e); lambda abstraction; no variadic functions\r\n        | (ifz con th el)         ; branching: (if (= con 0) th el)\r\n        | (prim-binop e1 e2)      ; primitive binary operator\r\n        | (fix e)                 ; the fixed-point combinator (primitive)\r\n        | (e1 e2 [e3 ...])        ; function application\r\n\r\n    t ::= Int\r\n        | Unit\r\n        | (* t1 [t2 ...])         ; n-tuple, n = 2, 3, 4, ...\r\n        | t1 -> t2\r\n\r\n#### The Language:\r\n\r\n* Constants include:\r\n  * integers, `..., -2, -1, 0, 1, 2, ... :: Int`\r\n  * unit, `() :: Unit`\r\n\r\n* Primitive binary operators:\r\n  * integer operations: addition `+`, multiplication `*`, both having type `(Int, Int) -> Int`\r\n\r\n* The language is statically typed without polymorphism\r\n\r\n* Call-by-value semantics and right-to-left evaluation\r\n\r\n### λIntr\r\nA call-by-value λ-calculus interpreter, byte-code\r\ncompiler written in Haskell and a derived virtual machine written in C++.\r\nThe source language uses Hindley-Milner type system.\r\n\r\n- [[project link]](https://github.com/suhorng/llintr)\r\n- [[presentation at Funth#5]](http://suhorng.github.io/llintr/lvm.html) [[code]](https://github.com/suhorng/llintr/tree/master/ft5-present/code)\r\n\r\n### C--\r\nA compiler for a subset of C language written in Haskell.\r\nThe source language is transformed to a low-level intermediate\r\nform inspired by LLVM, from which the MIPS assembly is generated.\r\n\r\n- [[project link]](https://github.com/suhorng/compiler13hw/)\r\n- [[presentation at Funth#11]](http://suhorng.github.io/ss/ft11/ccs.html) [[slide pdf]](http://suhorng.github.io/ss/ft11/Poor%20Man%27s%20Undergraduate Compilers.pdf)\r\n\r\n### RSA-GCD\r\n\r\n## Education\r\n- **B.S.** in [Computer Science and Information Engineering](http://www.csie.ntu.edu.tw/), [National Taiwan University](http://www.ntu.edu.tw/), Sep. 2011--Jun. 2015","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}